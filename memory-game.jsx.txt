// Not: Bu bileşen, mevcut memory-game.js dosyasını PWA uyumlu hale getirmiş halidir.
// İçerik aynıdır ancak bazı gerekli değişiklikler yapılmıştır

// Game level themes and items
const GAME_LEVELS = [
  {
    id: 1,
    name: 'Meyveler',
    theme: 'green',
    pairs: 6,
    timeLimit: 60,
    gridCols: 3,
    items: [
      { id: 1, name: 'apple', emoji: '🍎' },
      { id: 2, name: 'banana', emoji: '🍌' },
      { id: 3, name: 'orange', emoji: '🍊' },
      { id: 4, name: 'watermelon', emoji: '🍉' },
      { id: 5, name: 'strawberry', emoji: '🍓' },
      { id: 6, name: 'grapes', emoji: '🍇' },
      { id: 7, name: 'pineapple', emoji: '🍍' },
      { id: 8, name: 'peach', emoji: '🍑' },
    ]
  },
  {
    id: 2,
    name: 'Tatlılar',
    theme: 'purple',
    pairs: 8,
    timeLimit: 75,
    gridCols: 4,
    items: [
      { id: 1, name: 'cupcake', emoji: '🧁' },
      { id: 2, name: 'donut', emoji: '🍩' },
      { id: 3, name: 'cookie', emoji: '🍪' },
      { id: 4, name: 'cake', emoji: '🍰' },
      { id: 5, name: 'ice cream', emoji: '🍦' },
      { id: 6, name: 'candy', emoji: '🍬' },
      { id: 7, name: 'chocolate', emoji: '🍫' },
      { id: 8, name: 'pie', emoji: '🥧' },
    ]
  },
  {
    id: 3,
    name: 'Hayvanlar',
    theme: 'blue',
    pairs: 8,
    timeLimit: 80,
    gridCols: 4,
    items: [
      { id: 1, name: 'dog', emoji: '🐶' },
      { id: 2, name: 'cat', emoji: '🐱' },
      { id: 3, name: 'lion', emoji: '🦁' },
      { id: 4, name: 'elephant', emoji: '🐘' },
      { id: 5, name: 'monkey', emoji: '🐒' },
      { id: 6, name: 'tiger', emoji: '🐯' },
      { id: 7, name: 'bear', emoji: '🐻' },
      { id: 8, name: 'panda', emoji: '🐼' },
    ]
  },
  {
    id: 4,
    name: 'Deniz Dünyası',
    theme: 'blue',
    pairs: 8,
    timeLimit: 90,
    gridCols: 4,
    items: [
      { id: 1, name: 'fish', emoji: '🐟' },
      { id: 2, name: 'octopus', emoji: '🐙' },
      { id: 3, name: 'dolphin', emoji: '🐬' },
      { id: 4, name: 'shark', emoji: '🦈' },
      { id: 5, name: 'whale', emoji: '🐳' },
      { id: 6, name: 'turtle', emoji: '🐢' },
      { id: 7, name: 'crab', emoji: '🦀' },
      { id: 8, name: 'squid', emoji: '🦑' },
    ]
  },
  {
    id: 5,
    name: 'Taşıtlar',
    theme: 'dark',
    pairs: 10,
    timeLimit: 100,
    gridCols: 4,
    items: [
      { id: 1, name: 'car', emoji: '🚗' },
      { id: 2, name: 'bus', emoji: '🚌' },
      { id: 3, name: 'train', emoji: '🚂' },
      { id: 4, name: 'airplane', emoji: '✈️' },
      { id: 5, name: 'rocket', emoji: '🚀' },
      { id: 6, name: 'bike', emoji: '🚲' },
      { id: 7, name: 'boat', emoji: '⛵' },
      { id: 8, name: 'taxi', emoji: '🚕' },
      { id: 9, name: 'ambulance', emoji: '🚑' },
      { id: 10, name: 'police car', emoji: '🚓' },
    ]
  },
  {
    id: 6,
    name: 'Spor',
    theme: 'green',
    pairs: 10,
    timeLimit: 110,
    gridCols: 4,
    items: [
      { id: 1, name: 'soccer', emoji: '⚽' },
      { id: 2, name: 'basketball', emoji: '🏀' },
      { id: 3, name: 'football', emoji: '🏈' },
      { id: 4, name: 'baseball', emoji: '⚾' },
      { id: 5, name: 'tennis', emoji: '🎾' },
      { id: 6, name: 'bowling', emoji: '🎳' },
      { id: 7, name: 'golf', emoji: '⛳' },
      { id: 8, name: 'hockey', emoji: '🏒' },
      { id: 9, name: 'ping pong', emoji: '🏓' },
      { id: 10, name: 'boxing', emoji: '🥊' },
    ]
  },
  {
    id: 7,
    name: 'Müzik Aletleri',
    theme: 'purple',
    pairs: 12,
    timeLimit: 120,
    gridCols: 4,
    items: [
      { id: 1, name: 'guitar', emoji: '🎸' },
      { id: 2, name: 'piano', emoji: '🎹' },
      { id: 3, name: 'drum', emoji: '🥁' },
      { id: 4, name: 'trumpet', emoji: '🎺' },
      { id: 5, name: 'violin', emoji: '🎻' },
      { id: 6, name: 'saxophone', emoji: '🎷' },
      { id: 7, name: 'microphone', emoji: '🎤' },
      { id: 8, name: 'headphones', emoji: '🎧' },
      { id: 9, name: 'banjo', emoji: '🪕' },
      { id: 10, name: 'accordion', emoji: '🪗' },
      { id: 11, name: 'horn', emoji: '📯' },
      { id: 12, name: 'bell', emoji: '🔔' },
    ]
  },
  {
    id: 8,
    name: 'Bayraklar ve Ülkeler',
    theme: 'blue',
    pairs: 12,
    timeLimit: 130, 
    gridCols: 4,
    items: [
      { id: 1, name: 'Turkey', emoji: '🇹🇷' },
      { id: 2, name: 'USA', emoji: '🇺🇸' },
      { id: 3, name: 'UK', emoji: '🇬🇧' },
      { id: 4, name: 'Japan', emoji: '🇯🇵' },
      { id: 5, name: 'France', emoji: '🇫🇷' },
      { id: 6, name: 'Italy', emoji: '🇮🇹' },
      { id: 7, name: 'Germany', emoji: '🇩🇪' },
      { id: 8, name: 'Spain', emoji: '🇪🇸' },
      { id: 9, name: 'Brazil', emoji: '🇧🇷' },
      { id: 10, name: 'Canada', emoji: '🇨🇦' },
      { id: 11, name: 'Australia', emoji: '🇦🇺' },
      { id: 12, name: 'Russia', emoji: '🇷🇺' },
    ]
  },
  {
    id: 9,
    name: 'Uzay',
    theme: 'dark',
    pairs: 12,
    timeLimit: 150,
    gridCols: 4,
    items: [
      { id: 1, name: 'planet', emoji: '🪐' },
      { id: 2, name: 'star', emoji: '⭐' },
      { id: 3, name: 'moon', emoji: '🌙' },
      { id: 4, name: 'sun', emoji: '☀️' },
      { id: 5, name: 'comet', emoji: '☄️' },
      { id: 6, name: 'rocket', emoji: '🚀' },
      { id: 7, name: 'satellite', emoji: '🛰️' },
      { id: 8, name: 'astronaut', emoji: '👨‍🚀' },
      { id: 9, name: 'telescope', emoji: '🔭' },
      { id: 10, name: 'alien', emoji: '👽' },
      { id: 11, name: 'ufo', emoji: '🛸' },
      { id: 12, name: 'milky way', emoji: '🌌' },
    ]
  },
  {
    id: 10,
    name: 'Karışık Zorluk',
    theme: 'purple',
    pairs: 16,
    timeLimit: 180,
    gridCols: 4,
    items: [
      { id: 1, name: 'apple', emoji: '🍎' },
      { id: 2, name: 'pizza', emoji: '🍕' },
      { id: 3, name: 'dog', emoji: '🐶' },
      { id: 4, name: 'car', emoji: '🚗' },
      { id: 5, name: 'soccer', emoji: '⚽' },
      { id: 6, name: 'guitar', emoji: '🎸' },
      { id: 7, name: 'Turkey', emoji: '🇹🇷' },
      { id: 8, name: 'planet', emoji: '🪐' },
      { id: 9, name: 'fish', emoji: '🐟' },
      { id: 10, name: 'cake', emoji: '🍰' },
      { id: 11, name: 'monkey', emoji: '🐒' },
      { id: 12, name: 'train', emoji: '🚂' },
      { id: 13, name: 'baseball', emoji: '⚾' },
      { id: 14, name: 'drum', emoji: '🥁' },
      { id: 15, name: 'Japan', emoji: '🇯🇵' },
      { id: 16, name: 'alien', emoji: '👽' },
    ]
  }
];

// For backwards compatibility
const DIFFICULTY_LEVELS = {
  easy: { pairs: 6, gridCols: 3, timeLimit: 60 },
  medium: { pairs: 10, gridCols: 4, timeLimit: 90 },
  hard: { pairs: 16, gridCols: 4, timeLimit: 120 }
};

// Color themes
const THEMES = {
  purple: {
    primary: 'bg-purple-500',
    secondary: 'bg-purple-600',
    card: 'bg-pink-400',
    cardBack: 'bg-white',
    text: 'text-white',
    button: 'bg-pink-400 hover:bg-pink-500',
    buttonText: 'text-white',
    cardBorder: 'border-pink-200',
    highlight: 'text-purple-500',
    gradient: 'from-purple-500 to-pink-500'
  },
  blue: {
    primary: 'bg-blue-500',
    secondary: 'bg-blue-600',
    card: 'bg-cyan-400',
    cardBack: 'bg-white',
    text: 'text-white',
    button: 'bg-cyan-400 hover:bg-cyan-500',
    buttonText: 'text-white',
    cardBorder: 'border-cyan-200',
    highlight: 'text-blue-500',
    gradient: 'from-blue-500 to-cyan-500'
  },
  green: {
    primary: 'bg-green-500',
    secondary: 'bg-green-600',
    card: 'bg-emerald-400',
    cardBack: 'bg-white',
    text: 'text-white',
    button: 'bg-emerald-400 hover:bg-emerald-500',
    buttonText: 'text-white',
    cardBorder: 'border-emerald-200',
    highlight: 'text-green-500',
    gradient: 'from-green-500 to-emerald-500'
  },
  dark: {
    primary: 'bg-gray-800',
    secondary: 'bg-gray-900',
    card: 'bg-gray-600',
    cardBack: 'bg-gray-300',
    text: 'text-white',
    button: 'bg-amber-500 hover:bg-amber-600',
    buttonText: 'text-gray-900',
    cardBorder: 'border-amber-300',
    highlight: 'text-amber-500',
    gradient: 'from-gray-800 to-amber-500'
  }
};

// Language options
const LANGUAGES = {
  english: {
    title: 'MEMORY GAME',
    welcome: 'Welcome to Memory Kids! Test your memory by finding all matching card pairs.',
    startGame: 'Start Game',
    moves: 'Moves',
    time: 'Time',
    restart: 'Restart',
    congratulations: 'Congratulations!',
    completed: 'You completed the game in',
    moves_suffix: 'moves',
    time_suffix: 'seconds',
    playAgain: 'Play Again',
    settings: 'Settings',
    theme: 'Theme',
    difficulty: 'Difficulty',
    language: 'Language',
    sound: 'Sound',
    easy: 'Easy',
    medium: 'Medium',
    hard: 'Hard',
    on: 'On',
    off: 'Off',
    apply: 'Apply',
    cancel: 'Cancel',
    level: 'Level',
    levelComplete: 'Level Complete!',
    nextLevel: 'Next Level',
    selectLevel: 'Select Level',
    levelLocked: 'Level locked! Complete the previous level first.',
    backToLevels: 'Back to Levels'
  },
  turkish: {
    title: 'HAFIZA OYUNU',
    welcome: 'Memorama Kids\'e hoş geldiniz! Eşleşen kart çiftlerini bularak hafızanızı test edin.',
    startGame: 'Oyunu Başlat',
    moves: 'Hamle',
    time: 'Süre',
    restart: 'Yeniden Başlat',
    congratulations: 'Tebrikler!',
    completed: 'Oyunu tamamladınız:',
    moves_suffix: 'hamle',
    time_suffix: 'saniye',
    playAgain: 'Tekrar Oyna',
    settings: 'Ayarlar',
    theme: 'Tema',
    difficulty: 'Zorluk',
    language: 'Dil',
    sound: 'Ses',
    easy: 'Kolay',
    medium: 'Orta',
    hard: 'Zor',
    on: 'Açık',
    off: 'Kapalı',
    apply: 'Uygula',
    cancel: 'İptal',
    level: 'Seviye',
    levelComplete: 'Seviye Tamamlandı!',
    nextLevel: 'Sonraki Seviye',
    selectLevel: 'Seviye Seç',
    levelLocked: 'Seviye kilitli! Önce önceki seviyeyi tamamlayın.',
    backToLevels: 'Seviyelere Dön'
  },
  spanish: {
    title: 'JUEGO DE MEMORIA',
    welcome: '¡Bienvenido a Memorama Kids! Pon a prueba tu memoria encontrando todas las parejas de cartas.',
    startGame: 'Iniciar Juego',
    moves: 'Movimientos',
    time: 'Tiempo',
    restart: 'Reiniciar',
    congratulations: '¡Felicitaciones!',
    completed: 'Completaste el juego en',
    moves_suffix: 'movimientos',
    time_suffix: 'segundos',
    playAgain: 'Jugar de Nuevo',
    settings: 'Ajustes',
    theme: 'Tema',
    difficulty: 'Dificultad',
    language: 'Idioma',
    sound: 'Sonido',
    easy: 'Fácil',
    medium: 'Medio',
    hard: 'Difícil',
    on: 'Activado',
    off: 'Desactivado',
    apply: 'Aplicar',
    cancel: 'Cancelar',
    level: 'Nivel',
    levelComplete: '¡Nivel Completado!',
    nextLevel: 'Siguiente Nivel',
    selectLevel: 'Seleccionar Nivel',
    levelLocked: '¡Nivel bloqueado! Completa el nivel anterior primero.',
    backToLevels: 'Volver a Niveles'
  }
};

// Sound effects using Web Audio API
const Sounds = ({ soundEnabled, soundToPlay }) => {
  if (!soundEnabled) return null;
  
  React.useEffect(() => {
    if (!soundToPlay) return;
    
    // Create audio context
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    
    // Define different sounds
    let oscillator;
    let gainNode;
    
    // Create gain node
    gainNode = audioContext.createGain();
    gainNode.connect(audioContext.destination);
    
    // Configure sound based on type
    switch (soundToPlay) {
      case 'flip':
        // Card flip sound - short click
        oscillator = audioContext.createOscillator();
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(300, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(600, audioContext.currentTime + 0.1);
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
        oscillator.connect(gainNode);
        oscillator.start();
        oscillator.stop(audioContext.currentTime + 0.2);
        break;
        
      case 'match':
        // Match sound - higher pleasant tone
        oscillator = audioContext.createOscillator();
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(500, audioContext.currentTime);
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime + 0.1);
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
        oscillator.connect(gainNode);
        oscillator.start();
        oscillator.stop(audioContext.currentTime + 0.5);
        
        // Add a second oscillator for a chord effect
        setTimeout(() => {
          const osc2 = audioContext.createOscillator();
          const gain2 = audioContext.createGain();
          osc2.type = 'sine';
          osc2.frequency.setValueAtTime(600, audioContext.currentTime);
          osc2.frequency.setValueAtTime(1000, audioContext.currentTime + 0.1);
          gain2.gain.setValueAtTime(0.2, audioContext.currentTime);
          gain2.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
          osc2.connect(gain2);
          gain2.connect(audioContext.destination);
          osc2.start();
          osc2.stop(audioContext.currentTime + 0.3);
        }, 100);
        break;
        
      case 'win':
        // Win sound - ascending cheerful sequence
        for (let i = 0; i < 5; i++) {
          setTimeout(() => {
            const osc = audioContext.createOscillator();
            const gain = audioContext.createGain();
            osc.type = 'sine';
            osc.frequency.setValueAtTime(400 + (i * 100), audioContext.currentTime);
            gain.gain.setValueAtTime(0.2, audioContext.currentTime);
            gain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
            osc.connect(gain);
            gain.connect(audioContext.destination);
            osc.start();
            osc.stop(audioContext.currentTime + 0.3);
          }, i * 150);
        }
        break;
        
      case 'timeout':
        // Timeout sound - descending error tone
        for (let i = 0; i < 3; i++) {
          setTimeout(() => {
            const osc = audioContext.createOscillator();
            const gain = audioContext.createGain();
            osc.type = 'sawtooth';
            osc.frequency.setValueAtTime(300 - (i * 30), audioContext.currentTime);
            gain.gain.setValueAtTime(0.2, audioContext.currentTime);
            gain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.4);
            osc.connect(gain);
            gain.connect(audioContext.destination);
            osc.start();
            osc.stop(audioContext.currentTime + 0.4);
          }, i * 200);
        }
        break;
        
      default:
        break;
    }
    
    // Cleanup function
    return () => {
      if (oscillator) {
        try {
          oscillator.stop();
        } catch (e) {
          // Ignore errors if oscillator already stopped
        }
      }
    };
  }, [soundToPlay]);
  
  return null;
};

const MemoryGame = () => {
  const { useState, useEffect } = React;
  const { Clock, Volume2, VolumeX, Settings, Sparkles } = lucide;
  
  // Yerel depolamayı yönetmek için yardımcı fonksiyonlar
  const saveToLocalStorage = (key, value) => {
    try {
      localStorage.setItem(key, JSON.stringify(value));
    } catch (e) {
      console.error('Local storage error:', e);
    }
  };
  
  const loadFromLocalStorage = (key, defaultValue) => {
    try {
      const storedValue = localStorage.getItem(key);
      return storedValue ? JSON.parse(storedValue) : defaultValue;
    } catch (e) {
      console.error('Local storage error:', e);
      return defaultValue;
    }
  };

  // Game state
  const [cards, setCards] = useState([]);
  const [flippedCards, setFlippedCards] = useState([]);
  const [matchedPairs, setMatchedPairs] = useState([]);
  const [moves, setMoves] = useState(0);
  const [gameOver, setGameOver] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);
  const [timer, setTimer] = useState(0);
  const [timeLeft, setTimeLeft] = useState(60);
  const [isTimerRunning, setIsTimerRunning] = useState(false);
  const [soundToPlay, setSoundToPlay] = useState(null);
  const [showLevelSelect, setShowLevelSelect] = useState(true);
  const [currentLevel, setCurrentLevel] = useState(1);
  const [completedLevels, setCompletedLevels] = useState(
    loadFromLocalStorage('memoramaCompletedLevels', [])
  );
  
  // Settings
  const [theme, setTheme] = useState(loadFromLocalStorage('memoramaTheme', 'purple'));
  const [language, setLanguage] = useState(loadFromLocalStorage('memoramaLanguage', 'turkish'));
  const [soundEnabled, setSoundEnabled] = useState(loadFromLocalStorage('memoramaSoundEnabled', true));
  const [showSettings, setShowSettings] = useState(false);
  const [tempSettings, setTempSettings] = useState({
    theme: theme,
    language: language,
    soundEnabled: soundEnabled
  });
  
  // İlerleme ve ayarları kaydet
  useEffect(() => {
    saveToLocalStorage('memoramaCompletedLevels', completedLevels);
  }, [completedLevels]);
  
  useEffect(() => {
    saveToLocalStorage('memoramaTheme', theme);
  }, [theme]);
  
  useEffect(() => {
    saveToLocalStorage('memoramaLanguage', language);
  }, [language]);
  
  useEffect(() => {
    saveToLocalStorage('memoramaSoundEnabled', soundEnabled);
  }, [soundEnabled]);
  
  // Set up timer
  useEffect(() => {
    let interval;
    
    if (gameStarted && isTimerRunning && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft(prev => prev - 1);
        setTimer(prev => prev + 1);
      }, 1000);
    } else if (timeLeft === 0 && isTimerRunning) {
      // Time's up!
      setIsTimerRunning(false);
      setGameOver(true);
      if (soundEnabled) {
        setSoundToPlay('timeout');
      }
    }
    
    return () => clearInterval(interval);
  }, [gameStarted, isTimerRunning, timeLeft, soundEnabled]);

  // Start a specific level
  const startLevel = (levelNum) => {
    const gameLevel = GAME_LEVELS[levelNum - 1];
    
    if (!gameLevel) return;
    
    // If level is locked (except for level 1), show message
    if (levelNum > 1 && !completedLevels.includes(levelNum - 1) && completedLevels.length < levelNum - 1) {
      if (soundEnabled) {
        setSoundToPlay('timeout');
      }
      return;
    }
    
    // Create pairs of cards and shuffle them
    const cardPairs = [...gameLevel.items.slice(0, gameLevel.pairs), ...gameLevel.items.slice(0, gameLevel.pairs)]
      .map((card, index) => ({
        ...card,
        uniqueId: `${card.id}-${index}`,
        isFlipped: false,
        isMatched: false,
      }))
      .sort(() => Math.random() - 0.5);
    
    setCards(cardPairs);
    setFlippedCards([]);
    setMatchedPairs([]);
    setMoves(0);
    setTimer(0);
    setTimeLeft(gameLevel.timeLimit);
    setGameOver(false);
    setGameStarted(true);
    setIsTimerRunning(true);
    setShowLevelSelect(false);
    setCurrentLevel(levelNum);
    setTheme(gameLevel.theme);
  };
  
  // Initialize game (for backward compatibility)
  const initializeGame = () => {
    startLevel(currentLevel);
  };

  // Handle card click
  const handleCardClick = (clickedCard) => {
    // Don't allow flipping if game is over, card is already flipped or matched
    if (
      gameOver ||
      flippedCards.length === 2 ||
      flippedCards.some(card => card.uniqueId === clickedCard.uniqueId) ||
      matchedPairs.includes(clickedCard.id)
    ) {
      return;
    }

    // Flip the card and play sound
    if (soundEnabled) {
      setSoundToPlay('flip');
    }
    
    const newFlippedCards = [...flippedCards, clickedCard];
    setFlippedCards(newFlippedCards);

    // If two cards are flipped, check for a match
    if (newFlippedCards.length === 2) {
      setMoves(moves + 1);
      
      if (newFlippedCards[0].id === newFlippedCards[1].id) {
        // Match found
        if (soundEnabled) {
          setSoundToPlay('match');
        }
        setMatchedPairs([...matchedPairs, clickedCard.id]);
        setFlippedCards([]);
      } else {
        // No match, flip cards back after a delay
        setTimeout(() => {
          setFlippedCards([]);
        }, 800);
      }
    }
  };

  // Check for game over
  useEffect(() => {
    if (gameStarted && matchedPairs.length > 0) {
      const gameLevel = GAME_LEVELS[currentLevel - 1];
      
      if (matchedPairs.length === gameLevel.pairs) {
        setGameOver(true);
        setIsTimerRunning(false);
        
        // Add current level to completed levels if not already there
        if (!completedLevels.includes(currentLevel)) {
          setCompletedLevels(prev => [...prev, currentLevel]);
        }
        
        if (soundEnabled) {
          setSoundToPlay('win');
        }
      }
    }
  }, [matchedPairs, gameStarted, currentLevel, completedLevels, soundEnabled]);

  // Save current settings to temp when opening settings modal
  const openSettings = () => {
    setTempSettings({
      theme,
      language,
      soundEnabled
    });
    setShowSettings(true);
  };

  // Apply settings
  const applySettings = () => {
    setTheme(tempSettings.theme);
    setLanguage(tempSettings.language);
    setSoundEnabled(tempSettings.soundEnabled);
    setShowSettings(false);
  };

  // Cancel settings changes
  const cancelSettings = () => {
    setTempSettings({
      theme,
      language,
      soundEnabled
    });
    setShowSettings(false);
  };

  // Update temp settings
  const updateTempSetting = (setting, value) => {
    setTempSettings({
      ...tempSettings,
      [setting]: value
    });
  };

  // Get translations for current language
  const t = LANGUAGES[language];
  
  // Get current theme
  const currentTheme = THEMES[theme];

  // Format time for display
  const formatTime = (seconds) => {
    return `${Math.floor(seconds / 60).toString().padStart(2, '0')}:${(seconds % 60).toString().padStart(2, '0')}`;
  };

  // Render card
  const renderCard = (card) => {
    const isFlipped = 
      flippedCards.some(c => c.uniqueId === card.uniqueId) || 
      matchedPairs.includes(card.id);
    
    return (
      <div 
        key={card.uniqueId}
        className={`relative w-14 h-14 sm:w-16 sm:h-16 md:w-20 md:h-20 m-1 cursor-pointer rounded-xl transition-all duration-300 transform ${
          isFlipped ? 'scale-110' : 'hover:scale-105'
        }`}
        onClick={() => handleCardClick(card)}
      >
        <div className={`absolute w-full h-full rounded-xl transition-all duration-300 ${
          isFlipped ? 'opacity-0 rotate-y-180' : 'opacity-100 rotate-y-0'
        }`}>
          <div className={`w-full h-full flex items-center justify-center rounded-xl ${currentTheme.card} border-4 border-white shadow-lg`}>
            <div className="text-4xl text-white font-bold">?</div>
            <div className="absolute bottom-1 right-1 text-white text-xs">
              <div className="w-2 h-2 rounded-full bg-white opacity-70"></div>
            </div>
          </div>
        </div>
        
        <div className={`absolute w-full h-full rounded-xl transition-all duration-300 ${
          isFlipped ? 'opacity-100 rotate-y-0' : 'opacity-0 rotate-y-180'
        }`}>
          <div className={`w-full h-full flex items-center justify-center rounded-xl ${currentTheme.cardBack} border-4 ${currentTheme.cardBorder} shadow-lg`}>
            <div className="text-4xl sm:text-5xl">{card.emoji}</div>
            <div className="absolute bottom-1 right-1 text-xs">
              <div className={`w-2 h-2 rounded-full ${currentTheme.card} opacity-70`}></div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className={`flex flex-col items-center justify-center min-h-screen bg-gradient-to-b ${currentTheme.gradient} p-4`}>
      {/* Sound effects */}
      <Sounds soundEnabled={soundEnabled} soundToPlay={soundToPlay} />
      
      {/* Settings Modal - Ana div dışına taşıyalım ki her ekranda görünsün */}
      {showSettings && (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-xl shadow-2xl text-center max-w-md w-full">
            <h2 className={`text-xl font-bold ${currentTheme.highlight} mb-4`}>{t.settings}</h2>
            
            {/* Theme Selection */}
            <div className="mb-4">
              <p className="font-medium mb-2">{t.theme}</p>
              <div className="flex justify-center space-x-3">
                {Object.keys(THEMES).map((themeName) => (
                  <button
                    key={themeName}
                    onClick={() => updateTempSetting('theme', themeName)}
                    className={`w-8 h-8 rounded-full ${THEMES[themeName].primary} border-2 transition-all duration-200 transform ${tempSettings.theme === themeName ? 'border-black scale-125' : 'border-transparent'}`}
                  />
                ))}
              </div>
            </div>
            
            {/* Language Selection */}
            <div className="mb-4">
              <p className="font-medium mb-2">{t.language}</p>
              <div className="flex justify-center space-x-2">
                <button
                  onClick={() => updateTempSetting('language', 'english')}
                  className={`px-3 py-1 rounded-full transition-all duration-200 ${tempSettings.language === 'english' ? currentTheme.button + ' scale-110' : 'bg-gray-200'}`}
                >
                  English
                </button>
                <button
                  onClick={() => updateTempSetting('language', 'turkish')}
                  className={`px-3 py-1 rounded-full transition-all duration-200 ${tempSettings.language === 'turkish' ? currentTheme.button + ' scale-110' : 'bg-gray-200'}`}
                >
                  Türkçe
                </button>
                <button
                  onClick={() => updateTempSetting('language', 'spanish')}
                  className={`px-3 py-1 rounded-full transition-all duration-200 ${tempSettings.language === 'spanish' ? currentTheme.button + ' scale-110' : 'bg-gray-200'}`}
                >
                  Español
                </button>
              </div>
            </div>
            
            {/* Sound Toggle */}
            <div className="mb-6">
              <p className="font-medium mb-2">{t.sound}</p>
              <div className="flex justify-center space-x-2">
                <button
                  onClick={() => updateTempSetting('soundEnabled', true)}
                  className={`px-3 py-1 rounded-full flex items-center transition-all duration-200 ${tempSettings.soundEnabled ? currentTheme.button + ' scale-110' : 'bg-gray-200'}`}
                >
                  <Volume2 className="w-4 h-4 mr-1" /> {t.on}
                </button>
                <button
                  onClick={() => updateTempSetting('soundEnabled', false)}
                  className={`px-3 py-1 rounded-full flex items-center transition-all duration-200 ${!tempSettings.soundEnabled ? currentTheme.button + ' scale-110' : 'bg-gray-200'}`}
                >
                  <VolumeX className="w-4 h-4 mr-1" /> {t.off}
                </button>
              </div>
            </div>
            
            <div className="flex justify-center space-x-3">
              <button
                onClick={cancelSettings}
                className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-full"
              >
                {t.cancel}
              </button>
              <button
                onClick={applySettings}
                className={`${currentTheme.button} ${currentTheme.buttonText} font-bold py-2 px-4 rounded-full`}
              >
                {t.apply}
              </button>
            </div>
          </div>
        </div>
      )}
      
      <div className={`w-full max-w-xl rounded-lg p-4 flex flex-col items-center`}>
        <h1 className={`text-4xl font-bold ${currentTheme.text} mb-4 tracking-wider drop-shadow-lg`}>{t.title}</h1>
        
        {showLevelSelect ? (
          <div className="flex flex-col items-center justify-center mb-8 w-full">
            <p className={`${currentTheme.text} text-center mb-4 text-lg`}>
              {t.welcome}
            </p>
            <h2 className={`${currentTheme.text} text-xl font-bold mb-4`}>{t.selectLevel}</h2>
            <div className="grid grid-cols-2 sm:grid-cols-3 gap-4 max-w-md mx-auto">
              {GAME_LEVELS.map((level, index) => {
                const levelNum = index + 1;
                const isLocked = levelNum > 1 && !completedLevels.includes(levelNum - 1) && completedLevels.length < levelNum - 1;
                
                return (
                  <button
                    key={level.id}
                    onClick={() => startLevel(levelNum)}
                    className={`${isLocked ? 'bg-gray-500' : THEMES[level.theme].button} ${isLocked ? 'cursor-not-allowed' : 'transform hover:scale-105'} ${currentTheme.buttonText} text-center p-3 rounded-lg shadow-md transition-all duration-300 flex flex-col items-center`}
                    disabled={isLocked}
                  >
                    <span className="text-2xl mb-1">{levelNum}</span>
                    <span className="text-sm">{level.name}</span>
                    {completedLevels.includes(levelNum) && (
                      <Sparkles className="w-5 h-5 mt-1" />
                    )}
                  </button>
                );
              })}
            </div>
            <div className="mt-6 flex space-x-2">
              <button
                onClick={openSettings}
                className={`${currentTheme.button} ${currentTheme.buttonText} font-bold py-3 px-4 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105`}
              >
                <Settings className="w-6 h-6" />
              </button>
            </div>
          </div>
        ) : !gameStarted ? (
          <div className="flex flex-col items-center justify-center mb-8">
            <p className={`${currentTheme.text} text-center mb-4 text-lg`}>
              {t.welcome}
            </p>
            <div className="flex space-x-2">
              <button
                onClick={initializeGame}
                className={`${currentTheme.button} ${currentTheme.buttonText} font-bold py-3 px-6 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105`}
              >
                {t.startGame}
              </button>
              <button
                onClick={openSettings}
                className={`${currentTheme.button} ${currentTheme.buttonText} font-bold py-3 px-4 rounded-full shadow-lg transition-all duration-300 transform hover:scale-105`}
              >
                <Settings className="w-6 h-6" />
              </button>
            </div>
          </div>
        ) : (
          <>
            <div className="mb-4 flex flex-row justify-between w-full max-w-md">
              <div className="bg-white px-3 py-1 rounded-full shadow-md flex items-center">
                <p className={`${currentTheme.highlight} font-bold`}>{t.level} {currentLevel}</p>
              </div>
              <div className="bg-white px-3 py-1 rounded-full shadow-md flex items-center">
                <p className={`${currentTheme.highlight} font-bold`}>{t.moves}: {moves}</p>
              </div>
              <div className="bg-white px-3 py-1 rounded-full shadow-md flex items-center">
                <Clock className={`${currentTheme.highlight} w-4 h-4 mr-1`} />
                <p className={`${currentTheme.highlight} font-bold`}>{formatTime(timeLeft)}</p>
              </div>
              <div className="flex space-x-1">
                <button
                  onClick={() => setSoundEnabled(!soundEnabled)}
                  className={`${currentTheme.button} ${currentTheme.buttonText} font-bold px-2 py-1 rounded-full shadow-md transition-all duration-300`}
                >
                  {soundEnabled ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
                </button>
                <button
                  onClick={() => {
                    setGameStarted(false);
                    setShowLevelSelect(true);
                  }}
                  className={`${currentTheme.button} ${currentTheme.buttonText} font-bold px-3 py-1 rounded-full shadow-md transition-all duration-300`}
                >
                  {t.backToLevels}
                </button>
              </div>
            </div>
            
            <div className={`grid grid-cols-${GAME_LEVELS[currentLevel-1].gridCols} gap-1 ${currentTheme.secondary} p-3 rounded-lg shadow-xl`}>
              {cards.map(renderCard)}
            </div>
            
            {gameOver && (
              <div className="absolute inset-0 bg-black bg-opacity-70 flex items-center justify-center z-40">
                <div className="bg-white p-6 rounded-xl shadow-2xl text-center">
                  <Sparkles className={`mx-auto ${currentTheme.highlight} h-12 w-12 mb-2`} />
                  <h2 className={`text-2xl font-bold ${currentTheme.highlight} mb-2`}>{t.levelComplete}</h2>
                  <p className="mb-4">{t.completed} {moves} {t.moves_suffix} & {timer} {t.time_suffix}!</p>
                  <div className="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-3">
                    {currentLevel < GAME_LEVELS.length && (
                      <button
                        onClick={() => startLevel(currentLevel + 1)}
                        className={`${currentTheme.button} ${currentTheme.buttonText} font-bold py-2 px-4 rounded-full shadow-md transition-all duration-300 transform hover:scale-105`}
                      >
                        {t.nextLevel}
                      </button>
                    )}
                    <button
                      onClick={() => {
                        setGameStarted(false);
                        setShowLevelSelect(true);
                      }}
                      className={`bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-full shadow-md transition-all duration-300 transform hover:scale-105`}
                    >
                      {t.backToLevels}
                    </button>
                  </div>
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

// Ana uygulamayı yükle
document.addEventListener('DOMContentLoaded', () => {
  // Yükleme ekranını gizle
  const loadingScreen = document.querySelector('.loading');
  if (loadingScreen) {
    loadingScreen.style.display = 'none';
  }
  
  // Oyunu render et
  ReactDOM.render(
    <MemoryGame />,
    document.getElementById('root')
  );
});